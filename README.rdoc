= mysql2_model the anti-orm

Mysql2Model will add a thin veneer to mysql2 to allow deliberate,
performant containment of associated business logic that is expressed by raw
MySQL statements.

This gem is being designed to be used when more adaptable, extensible, or
heavier ORM's have outlived their usefulness or desirability for the specific task
at hand. (ActiveRecord, Sequel, Datamapper, et al)

While the example given in this README is trivial the most likely usage would be with 
particularly gnarly business logic as you might need in generating analytics 
where using the typical ORM's yield numerous sub-optimal SQL queries, and you are desperate
for a simpler more precise approach.

== Usage

=== Require it

  require 'mysql2_model'

=== Create a yml structure to point to the databases

  # config/repositories.yml
  :repositories:
    :default:
      :database: community_production
      :username: root
      :password: gibberish
      :host: localhost
    :infrastructure:
      :database: infrastructure_production
      :username: infra_user
      :password: more_gibberish
      :host: localhost
      
=== Config it

  Mysql2Model::Config.repository_path = 'config/repositories.yml'
  
=== Create your model

  class Mtdb
    include Mysql2Model::Container
  
    def self.all
      query "SELECT id, database_name, db_server_host, db_server_port, db_server_user, db_server_password * FROM mtdbs"
    end
    
    def self.count
      value("SELECT COUNT(*) FROM mtdbs")
    end
    
    # ? Mark substitution
    def self.find_by_database_name_and_host(name,host)
      query("SELECT * FROM mtdbs WHERE database_name = '?' and database_host = '?'",name,host)
    end
    
    # printf style shown with block pattern
    def self.find_by_host(host)
      query do
        ["SELECT * FROM mtdbs WHERE database_host = '%s'",host]
      end
    end
    
    # Named Binds
    def self.arrange_by_custom_order(order,user)
      query("SELECT * FROM mtdbs WHERE db_server_user = ':user' ORDER BY database_name :order, db_server_host :order", :order => order, :user => user)
    end
  
    def config_name
      "mtdb#{id}".to_sym
    end
  
    def to_config
      {
        config_name => {
          :host => db_server_host,
          :database => database_name,
          :port => db_server_port,
          :username => db_server_user,
          :password => db_server_password_unencrypted
        }
      }
    end
  
    def db_server_password_unencrypted
      nil # You have to invent your own.
    end
  
    def self.default_repository_name # You don't need this if you want to use the default repo
      :infrastructure
    end
  
  end

=== Use it

  Mtdb.all.each |mtdb|
    puts "Database: #{mtdb.database_name}:" #direct method access
    puts "Host: #{mtdb[:db_server_host]}"   #direct member access
    puts "Config: {mtdb.to_config.inspect}" #model methods
  end

== Todo
* Incorporate Test,Production,Development into the repositories.yml
* Time formatting when using the composing pattern to seamlessly pass time objects to mysql2
* Refactor Mysql2Model::Client so that it no longer uses class variables.
* Improve instantiating the results so that we can regain mysql2's lazy loading.
* Evented Connection Pools
* Evented Query Patterns

== Note on Patches/Pull Requests
 
* Fork the project.
* Make your feature addition or bug fix.
* Add tests for it. This is important so I don't break it in a future version unintentionally.
* Commit, do not mess with rakefile, version, or history.
  (if you want to have your own version, that is fine but bump version in a commit by itself I can ignore when I pull)
* Send me a pull request. Bonus points for topic branches.

== Similar Projects
* RBatis is the port of iBatis to Ruby and Ruby on Rails. http://ibatis.apache.org/docs/ruby/ (Appears to be discontinued)

== Special Thanks

* Brian Lopez - Mysql2 Gem (http://github.com/brianmario/mysql2)

== Copyright

Copyright (c) 2010 donnoman. See MIT-LICENSE for details.

